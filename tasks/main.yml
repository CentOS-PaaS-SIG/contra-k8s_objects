---
- name: Install prereqs
  import_tasks: prereqs.yml
  when: run_prereqs == true

- name: Log in (obtain access token)
  k8s_auth:
    host: "{{ k8s_auth_host }}"
    validate_certs: False
    username: "{{ k8s_username }}"
    password: "{{ k8s_password }}"
  register: k8s_auth_results
  when: k8s_username != ""

- name: set auth api key if username/password is provided
  set_fact:
    k8s_auth_api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
  when: k8s_auth_results.k8s_auth is defined

- name: "Create openshift project {{ openshift_project }}"
  k8s:
    host: "{{ k8s_auth_host }}"
    api_key: "{{ k8s_auth_api_key }}"
    name: "{{ openshift_project }}"
    kind: ProjectRequest
    state: "{{ k8s_state }}"
    validate_certs: False
  no_log: true
  register: result
  until: result.failed == false
  delay: 5
  retries: 120
  when: create_project

- name: Merge and order configs
  import_tasks: order_configs.yml
  when: k8s_resource_files|length>0 or k8s_resource_dirs|length>0

- name: Creating k8s secret objects
  k8s:
    host: "{{ k8s_auth_host }}"
    api_key: "{{ k8s_auth_api_key }}"
    namespace: "{{ openshift_project }}"
    state: "{{ k8s_state }}"
    validate_certs: False
    definition: "{{ lookup('template', item.key) }}"
  no_log: "{{ item.value }}"
  with_dict: "{{ k8s_secrets }}"
  when: k8s_secrets | type_debug == 'dict'

- name: Creating k8s secret objects
  k8s:
    host: "{{ k8s_auth_host }}"
    api_key: "{{ k8s_auth_api_key }}"
    namespace: "{{ openshift_project }}"
    state: "{{ k8s_state }}"
    validate_certs: False
    definition: "{{ lookup('template', item) }}"
  no_log: True
  with_items: "{{ k8s_secrets }}"
  when: k8s_secrets | type_debug == 'list'

- name: Creating k8s objects
  k8s:
    host: "{{ k8s_auth_host }}"
    api_key: "{{ k8s_auth_api_key }}"
    namespace: "{{ openshift_project }}"
    state: "{{ k8s_state }}"
    validate_certs: False
    definition: "{{ lookup('template', item.key) }}"
  with_dict: "{{ k8s_resources }}"
  when: k8s_resources | type_debug == 'dict'

- name: Creating k8s objects
  k8s:
    host: "{{ k8s_auth_host }}"
    api_key: "{{ k8s_auth_api_key }}"
    namespace: "{{ openshift_project }}"
    state: "{{ k8s_state }}"
    validate_certs: False
    definition: "{{ lookup('template', item) }}"
  with_items: "{{ k8s_resources }}"
  when: k8s_resources | type_debug == 'list'
